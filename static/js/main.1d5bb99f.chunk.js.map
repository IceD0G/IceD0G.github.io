{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","weather","setWeather","input","setInput","time","setTime","open","setOpen","useEffect","axios","get","then","data","current","last_updated","split","catch","err","console","log","className","action","type","onChange","e","target","value","onClick","preventDefault","interceptors","request","use","test","location","country","name","condition","text","src","icon","alt","temp_c","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOA2EeA,MAvEf,WAAgB,IAAD,EACgBC,mBAAS,MADzB,mBACPC,EADO,KACEC,EADF,OAEYF,mBAAS,IAFrB,mBAEPG,EAFO,KAEAC,EAFA,OAGUJ,mBAAS,IAHnB,mBAGPK,EAHO,KAGDC,EAHC,OAIUN,oBAAS,GAJnB,mBAIPO,EAJO,KAIDC,EAJC,KA6Cd,OAxCAC,qBAAU,WACTC,IACEC,IACA,qGAEAC,MAAK,SAAAC,GACLX,EAAWW,EAAKA,MAChBP,EAAQO,EAAKA,KAAKC,QAAQC,aAAaC,MAAM,SAE7CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QACzB,IA+BF,qBAAKG,UAAU,YAAf,SACEpB,GACA,sBAAKoB,UAAU,UAAf,UACC,uBAAMC,OAAO,GAAb,UACC,uBAAOC,KAAK,OAAOC,SAjCJ,SAAAC,GACnBrB,EAASqB,EAAEC,OAAOC,OACK,KAAnBF,EAAEC,OAAOC,OACZnB,GAASD,MA+BN,wBAAQqB,QA5BS,SAAAH,GACrBA,EAAEI,iBACFnB,IAAMoB,aAAaC,QAAQC,KAAI,SAAAC,GAE9B,OADAd,QAAQC,IAAR,eAAoBa,IACbA,KAERvB,IACEC,IADF,2FAEsFR,IAEpFS,MAAK,SAAAC,GACLX,EAAWW,EAAKA,MAChBP,EAAQO,EAAKA,KAAKC,QAAQC,aAAaC,MAAM,MAC7B,KAAZf,GACHO,GAASD,MAMVU,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAQvB,4BAED,sBAAKG,UAAS,uBAAkBd,EAAO,OAAS,IAAhD,UACC,6BAAKN,EAAQiC,SAASC,UACtB,6BAAKlC,EAAQiC,SAASE,OACtB,sBAAKf,UAAU,YAAf,UACC,6BAAKpB,EAAQa,QAAQuB,UAAUC,OAC/B,qBAAKC,IAAKtC,EAAQa,QAAQuB,UAAUG,KAAMC,IAAI,QAG/C,qCACKpC,EAAK,GADV,gBAC2BJ,EAAQa,QAAQ4B,OAD3C,qBCrDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1d5bb99f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n\tconst [weather, setWeather] = useState(null);\r\n\tconst [input, setInput] = useState('');\r\n\tconst [time, setTime] = useState([]);\r\n\tconst [open, setOpen] = useState(false);\r\n\tuseEffect(() => {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t'https://api.weatherapi.com/v1/current.json?key=a4ab2c97c17d41b8a99154701211304&q=Saint-Petersburg',\r\n\t\t\t)\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetWeather(data.data);\r\n\t\t\t\tsetTime(data.data.current.last_updated.split(' '));\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(err));\r\n\t}, []);\r\n\t//event\r\n\tconst weatheInput = e => {\r\n\t\tsetInput(e.target.value);\r\n\t\tif (e.target.value === '') {\r\n\t\t\tsetOpen(!open);\r\n\t\t}\r\n\t};\r\n\tconst searchWeather = e => {\r\n\t\te.preventDefault();\r\n\t\taxios.interceptors.request.use(test => {\r\n\t\t\tconsole.log(`req: ${test}`);\r\n\t\t\treturn test;\r\n\t\t});\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t`https://api.weatherapi.com/v1/current.json?key=a4ab2c97c17d41b8a99154701211304&q=${input}`,\r\n\t\t\t)\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetWeather(data.data);\r\n\t\t\t\tsetTime(data.data.current.last_updated.split(' '));\r\n\t\t\t\tif (weather !== '') {\r\n\t\t\t\t\tsetOpen(!open);\r\n\t\t\t\t\t// if (!open) {\r\n\t\t\t\t\t// \tsetOpen(!open);\r\n\t\t\t\t\t// }\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(err));\r\n\t};\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t{weather && (\r\n\t\t\t\t<div className='weather'>\r\n\t\t\t\t\t<form action=''>\r\n\t\t\t\t\t\t<input type='text' onChange={weatheInput} />\r\n\t\t\t\t\t\t<button onClick={searchWeather}>Search city</button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t<div className={`weather-info ${open ? 'show' : ''}`}>\r\n\t\t\t\t\t\t<h1>{weather.location.country}</h1>\r\n\t\t\t\t\t\t<h2>{weather.location.name}</h2>\r\n\t\t\t\t\t\t<div className='condition'>\r\n\t\t\t\t\t\t\t<h4>{weather.current.condition.text}</h4>\r\n\t\t\t\t\t\t\t<img src={weather.current.condition.icon} alt='' />\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\tIn {time[1]} weather was {weather.current.temp_c} Â°C\r\n\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}